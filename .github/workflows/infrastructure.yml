name: PR

on:
  workflow_dispatch:
  push:
    branches: [trunk]
    paths: [repository/**]

env:
  FOLDER: repository
  BRANCH_PREFIX: infrabot
  FOLDER_SRC: src
  FOLDER_DEST: dest
jobs:
  copy-files:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository_name:
          [
            infrastructure-modules,
            infrastructure-live,
            scraper-backend,
            scraper-frontend,
          ]
    steps:
      - name: Checkout ${{ env.FOLDER_SRC }}
        uses: actions/checkout@v3
        with:
          path: $${{ env.FOLDER_SRC }}
          ref: ${{ github.head_ref || github.ref_name }} # trunk
          persist-credentials: false

      - name: Checkout ${{ env.FOLDER_DEST }}
        uses: actions/checkout@v3
        with:
          path: ${{ env.FOLDER_DEST }}
          ref: ${{ github.head_ref || github.ref_name }} # trunk
          repository: ${{ github.repository_owner }}/${{ matrix.repository_name }}
          token: ${{ secrets.GH_INFRA_COMMON_TOKEN }}
          fetch-depth: 0
          persist-credentials: true

      - name: Close old branches
        shell: bash
        working-directory: ${{ env.FOLDER_DEST }}
        run: |
          BRANCH_NAME=$BRANCH_PREFIX/$(basename ${{ github.repository }})/$FOLDER-${{ github.head_ref || github.ref_name }}
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          for branch in $(git branch -r | grep origin/$BRANCH_NAME); do
            echo "Deleting branch $branch"
            git push origin --delete ${branch:7}
          done

      - name: Create new local branch
        shell: bash
        working-directory: ${{ env.FOLDER_DEST }}
        run: |
          git checkout -b $BRANCH_NAME

      - name: Copy files
        shell: bash
        run: |
          ls
          for subFolder in $(find $FOLDER_SRC/$FOLDER/ -type d); do
            mkdir -p $FOLDER_DEST/${subFolder:$(echo $FOLDER_SRC | wc -c)}
          done
          cp -r $FOLDER_SRC/$FOLDER/* $FOLDER_DEST/

      - name: Commit files
        id: newFiles
        shell: bash
        working-directory: ${{ env.FOLDER_DEST }}
        run: |
          git add -A
          git status --porcelain   
          echo FILES=$(git status --porcelain) >> $GITHUB_ENV
          if [[ $(git status --porcelain | wc -l) -gt 0 ]]; then
            echo "hasNewFiles=true" >> $GITHUB_OUTPUT
          else
            echo "hasNewFiles=false" >> $GITHUB_OUTPUT
          fi

      - name: Set git credentials
        if: steps.newFiles.outputs.hasNewFiles == 'true'
        shell: bash
        working-directory: ${{ env.FOLDER_DEST }}
        run: |
          git config --global user.name ${{ vars.GH_INFRA_COMMON_USER_NAME }}
          git config --global user.email ${{ vars.GH_INFRA_COMMON_EMAIL }}
          git ls-remote

      - name: Publish branch
        if: steps.newFiles.outputs.hasNewFiles == 'true'
        shell: bash
        working-directory: ${{ env.FOLDER_DEST }}
        run: |
          git push -u origin $BRANCH_NAME

      - name: Push commit
        if: steps.newFiles.outputs.hasNewFiles == 'true'
        shell: bash
        working-directory: ${{ env.FOLDER_DEST }}
        run: |
          git commit -m "maint: Updated $FOLDER files from ${{ github.repository_owner }}/$(basename ${{ github.repository }})@${{ github.head_ref || github.ref_name }}"
          git push

      - name: Create pull request
        if: steps.newFiles.outputs.hasNewFiles == 'true'
        env:
          COMMITS: ${{ toJSON(github.event.commits) }}
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GH_INFRA_COMMON_TOKEN }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ matrix.repository_name }}/pulls \
            -d @- << EOF
            {
              "title":"Bumps infrastructure common $FOLDER ${{ github.head_ref || github.ref_name }}",
              "body":"#### Bumps infrastructure common $FOLDER ${{ github.head_ref || github.ref_name }}
              <details><summary>Sha</summary>${{ github.event.after }}</details>
              <details><summary>Commits</summary>
              <ul>
              $(for commit in $(echo $COMMITS | jq -rc .[]); do echo "<li>[$(echo $(echo $commit | jq -rc .id) | cut -c-8)]($(echo $commit | jq -rc .url)) author: $(echo $commit | jq -rc .author.name), committer $(echo $commit | jq -rc .committer.name), message $(echo $commit | jq -rc .message)</li>"; done)
              </ul>
              </details>
              <details><summary>Compare</summary>${{ github.event.compare }}</details>",
              "head":"$BRANCH_NAME",
              "base":"${{ github.head_ref || github.ref_name }}"
            }
          EOF
